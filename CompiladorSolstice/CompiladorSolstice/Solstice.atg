#include "Tabla.h"
#include <iostream>
COMPILER Solstice
TABLA dir;
int type;
int vis;
string name;
string clase;
bool err;

string conv(wchar_t* x){
	std::wstring ws(x);
	string s(ws.begin(), ws.end());
	s.assign(ws.begin(), ws.end());
	return s;
};

CHARACTERS
  letra = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  letraU = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
  digito = "0123456789".
  rc  = '\r'.
  sl  = '\n'.
  tab = '\t'.
  otrosC = ANY - '/' - '*'.
  otrosS = ANY - '"' - rc - sl - tab.
	
TOKENS
  idV = '_'letra {letra | digito}. /* Id Variable */
  idM = '#' letra {letra | digito}. /* Id Metodo */
  idO = letraU {letra | digito}. /* Id Objeto Nombre de la Clase */
  idC = '$' letraU {letra | digito}. /* Id Constructor */
  cteI = digito {digito}.
  cteD = digito {digito} "." digito {digito} .
  cteS = '\"' otrosS {otrosS} '\"'.
  cteB = "true" | "false".
  tCla = "class".
  tPub = "public".
  tPri = "private".	
  tPro = "protect".	
  tRet = "return".		
  tStr = "string".		
  tInt = "int". 		
  tDou = "double".
  tBoo = "bool".		
  tNew = "new".		
  tVoi = "void".		
  tCon = "if" | "?".		
  tEls = "else" | ":".
  tEif = "elseif" | ":?".  
  tWhi = "while" | "@".
  tExt = '-''>'.
  tMai = "main".
  tLec = '>''>'.
  tEsc = '<''<'.
  tInc = '+''+'.
  tDec = '-''-'.
  tMay = '>''='.
  tMen = '<''='.
  tDif = '<''>'.
  tEqu = '=''='.

PRAGMAS
	comentarios = "/*" {'/' | otrosC | '*' {'*'} otrosC} '*' {'*'} '/'.
	
IGNORE rc + sl + tab

PRODUCTIONS
	Solstice = Class Main.
	
	Arr = '[' (idV | cteI) ']'.
	
	Asig = ((tInc | tDec | Asig2) | Arr Asig2) ';'.
	
	Asig2 = '=' Expresion.
	
	Atributo = Vis Tipo idV (.	name = conv(t->val);
								if(dir.find(name) == dir.end()){
									dir.insert(TABLA::value_type(name, Attribute(vis, type, 0, clase)));
									name = "";
									vis = type = -1;
								} else {
									cout << "PREVIOUSLY DECLARED ATTRIBUTE: " << name << '\n';
								err = TRUE;
								}
							.)';'.
	
	Bloque = Atributo{Atributo} Constructor {Vis (MetodoR | MetodoV)}.
	
	Ciclo = tWhi '(' Expresion ')' '{' {Estatuto} '}'.
	
	Class = tCla idO (. clase = conv(t->val); .) [tExt idO] '{' Bloque '}' [Class].
	
	Con = tCon '(' Expresion ')' '{' Estatuto {Estatuto} '}' {tEif '(' Expresion ')' '{' Estatuto {Estatuto} '}'}.
	
	Con2 = tEls '{' Estatuto {Estatuto} '}'.
	
	ConG = Con [Con2].
	
	Constructor = idC '(' [Param] ')' '{' {Init} '}'.
	
	CTE = cteS | cteI | cteD | cteB.
	
	CTES = idV | CTE.
	
	Decl (. string nameL;.) 
		= (New | Tipo idV (.nameL = conv(t->val);
							if(( dir.find(nameL) == dir.end()) && 
								(dir[name].vars.find(nameL) == dir[name].vars.end())){
								dir[name].vars.insert(VMAP::value_type(nameL, Variable(type, 0)));
							} else {
								cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
								err = TRUE;
							}
						.)( '=' CTES | Arr) 
						{',' idV (.	nameL = conv(t->val);
									if( (dir.find(nameL) == dir.end()) && 
										(dir[name].vars.find(nameL) == dir[name].vars.end())){
										dir[name].vars.insert(VMAP::value_type(nameL, Variable(type, 0)));
									} else {
										cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
										err = TRUE;
									}
								.)( '=' CTES | 
						Arr (.	nameL = conv(t->val);
								if((dir.find(nameL) == dir.end()) && (dir[name].vars.find(nameL) == dir[name].vars.end())){
									dir[name].vars.insert(VMAP::value_type(nameL, Variable(type, 1)));
								} else {
									cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
									err = TRUE;
								}
							.))}) ';'.
	
	Esc = tEsc '(' Expresion {'^' Expresion} ')' ';'.
	
	Estatuto = (idV (Asig | Reg)) | Metodo ';' | Ciclo | Esc | Lec | ConG.
	
	Exp = Termino [('+' | '-') Termino].
	
	ExpOY = Expresion [('&' | '|') Expresion].
	
	Expresion = Exp [(tMay | tMen | tDif | '<' | '>' | tEqu) Exp].
	
	Factor =  ['~'|'-'] ('(' ExpOY ')' | idV [Reg|Arr] | CTE | Metodo).
	
	Init = idV '=' CTES ';'.
	
	Lec = tLec '(' idV ')' ';'.
	
	Lista = idV [',' Lista].
	
	Main = tMai (.	name = conv(t->val);
					if(dir.find(name) == dir.end()){
						dir.insert(TABLA::value_type(name, Attribute(vis, MAIN, 0, "")));
						vis = type = -1;
					} else {
						cout << "CANNOT DECLARE MORE THAN ONE MAIN." << '\n';
						err = TRUE;
					}
				.)'(' ')' '{' {Decl} {Estatuto} '}'.
	
	Metodo = idM '(' [Lista] ')'.
	
	MetodoR = Tipo idM (.	name = conv(t->val);
							if(dir.find(name) == dir.end()){
								dir.insert(TABLA::value_type(name, Attribute(vis, type, 1, clase)));
								vis = type = -1;
							} else {
								cout << "PREVIOUSLY DECLARED METHOD: " << name << '\n';
								err = TRUE;
							}
						.) '(' [Param] ')' '{' {Decl} {Estatuto} Return '}' (. name = "";.).
						
	MetodoV = tVoi idM (.	name = conv(t->val);
							if(dir.find(name) == dir.end()){
								dir.insert(TABLA::value_type(name, Attribute(vis, VOID, 1, clase)));
								vis = type = -1;
							} else {
								cout << "PREVIOUSLY DECLARED METHOD: " << name << '\n';
								err = TRUE;
							}
						.) '(' [Param] ')' '{' {Decl} {Estatuto} '}' (. name = "";.).
						
	New (. string nameL; .)  
		= idO idV (.	nameL = conv(t->val);
						if((dir.find(nameL) == dir.end()) && (dir[name].vars.find(nameL) == dir[name].vars.end())){
							dir[name].vars.insert(VMAP::value_type(nameL, Variable(4, 0)));
						} else {
							cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
							err = TRUE;
						}
					.)'=' tNew idC '(' [Lista] ')'.
					
	Param (. string nameL; .) 
		= Tipo idV (.	nameL = conv(t->val);
						if((dir.find(nameL) == dir.end()) && (dir[name].vars.find(nameL) == dir[name].vars.end())){
							dir[name].vars.insert(VMAP::value_type(nameL, Variable(type, 0)));
						} else {
							cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
							err = TRUE;
						}
					.)[',' Param].
					
	Reg = '.' (Metodo | idV).
	
	Return = tRet Expresion ';'.
	
	Termino = Factor [('*' | '/' | '%') Factor].
	
	Tipo = tInt (. type = INT; .)| 
			tDou (. type = DOUBLE; .)| 
			tStr (. type = STRING; .)| 
			tBoo(. type = BOOLEAN; .).
	
	Vis = tPub (. vis = PUBLIC; .)| 
			tPri (. vis = PRIVATE; .)| 
			tPro(. vis = PROTECT; .).
END Solstice.	