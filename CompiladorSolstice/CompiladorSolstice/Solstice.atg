#include "Tabla.h"
#include "Cubo.h"
#include <iostream>
COMPILER Solstice
TABLA dir;
Cubo x;
stack<int> oper;
stack<CVariable> operandos;
stack<int> saltos;
vector<Cuadruplo> gen;
vector<Cuadruplo>::iterator it;
int type;
int ctype;
int vis;
int dim;
int avail;
string name;
string clase;
bool err;

string conv(wchar_t* x){
	std::wstring ws(x);
	string s(ws.begin(), ws.end());
	s.assign(ws.begin(), ws.end());
	return s;
};

CHARACTERS
  letra = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  letraU = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
  digito = "0123456789".
  rc  = '\r'.
  sl  = '\n'.
  tab = '\t'.
  otrosC = ANY - '/' - '*'.
  otrosS = ANY - '"' - rc - sl - tab.
	
TOKENS
  idV = '_'letra {letra | digito}. /* Id Variable */
  idM = '#' letra {letra | digito}. /* Id Metodo */
  idO = letraU {letra | digito}. /* Id Objeto Nombre de la Clase */
  idC = '$' letraU {letra | digito}. /* Id Constructor */
  cteI = digito {digito}.
  cteD = digito {digito} "." digito {digito} .
  cteS = '\"' otrosS {otrosS} '\"'.
  cteB = "true" | "false".
  tCla = "class".
  tPub = "public".
  tPri = "private".	
  tPro = "protect".	
  tRet = "return".		
  tStr = "string".		
  tInt = "int". 		
  tDou = "double".
  tBoo = "bool".		
  tNew = "new".		
  tVoi = "void".		
  tCon = "if" | "?".		
  tEls = "else" | ":".
  tEif = "elseif" | ":?".  
  tWhi = "while" | "@".
  tExt = '-''>'.
  tMai = "main".
  tLec = '>''>'.
  tEsc = '<''<'.
  tInc = '+''+'.
  tDec = '-''-'.
  tMay = '>''='.
  tMen = '<''='.
  tDif = '<''>'.
  tEqu = '=''='.

PRAGMAS
	comentarios = "/*" {'/' | otrosC | '*' {'*'} otrosC} '*' {'*'} '/'.
	
IGNORE rc + sl + tab

PRODUCTIONS
	Solstice = (. x = Cubo(); .)Class Main.
	
	Arr = '[' (idV | cteI) ']' (. dim = 1; .).
	
	Asig = ((tInc | tDec | Asig2) | Arr Asig2) ';'.
	
	Asig2 = '=' ExpOY.
	
	Atributo = Vis Tipo idV (.	name = conv(t->val);
								if(dir.find(name) == dir.end()){
									dir.insert(TABLA::value_type(name, Attribute(vis, type, 0, clase)));
									name = "";
									vis = type = -1;
								} else {
									cout << "PREVIOUSLY DECLARED ATTRIBUTE: " << name << '\n';
								err = TRUE;
								}
							.)';'.
	
	Bloque = Atributo{Atributo} Constructor {Vis (MetodoR | MetodoV)}.
	
	Ciclo = tWhi '(' ExpOY ')' '{' {Estatuto} '}'.
	
	Class = tCla idO (. clase = conv(t->val); .) [tExt idO] '{' Bloque '}' [Class].
	
	Con = tCon '(' ExpOY ')' '{' Estatuto {Estatuto} '}' {tEif '(' ExpOY ')' '{' Estatuto {Estatuto} '}'}.
	
	Con2 = tEls '{' Estatuto {Estatuto} '}'.
	
	ConG = Con [Con2].
	
	Constructor = idC 	(.	name = conv(t->val);
						if(dir.find(name) == dir.end()){
							dir.insert(TABLA::value_type(name, Attribute(PUBLIC, OBJECT, 1, "")));
							vis = type = -1;
						} else {
							cout << "CANNOT DECLARE MORE THAN ONE CONSTRUCTOR." << '\n';
							err = TRUE;
						}
						.)'(' [Param] ')' '{' {Init} '}'.
	
	CTE = cteS (. ctype = 2; .)| cteI (. ctype = 0; .)| cteD (. ctype = 1; .)| cteB (. ctype = 3; .).
	
	CTES = idV | CTE.
	
	Decl (. string nameL;.) 
		= (New | Tipo idV (. nameL = conv(t->val); .)
		  ( '=' CTES | Arr) (.
							if(( dir.find(nameL) == dir.end()) && 
								(dir[name].vars.find(nameL) == dir[name].vars.end())){
								dir[name].vars.insert(VMAP::value_type(nameL, Variable(type, dim)));
								dim = 0;
							} else {
								cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
								err = TRUE;
							}
							.) 
		  {',' idV (. nameL = conv(t->val); .) 
		  ( '=' CTES | Arr )(.
							if(( dir.find(nameL) == dir.end()) && 
								(dir[name].vars.find(nameL) == dir[name].vars.end())){
								dir[name].vars.insert(VMAP::value_type(nameL, Variable(type, dim)));
								dim = 0;
							} else {
								cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
								err = TRUE;
							}
							.)}) ';'.
	
	Esc = tEsc '(' ExpOY {'^' ExpOY} ')' ';'.
	
	Estatuto = (idV (.string temp = conv(t->val); 
					if((dir.find(temp) == dir.end()) && (dir[name].vars.find(temp) == dir[name].vars.end())){
						cout << "UNDECLARED VARIABLE: " << temp << '\n';
						err = TRUE;
					}
					.) 
				(Asig | Reg)) | Metodo ';' | Ciclo | Esc | Lec | ConG.
	
	Exp = Termino {('+' (. oper.push(SUM); .) | 
					  '-' (. oper.push(SUB); .)) Termino}.
	
	ExpOY = Expresion {('&' (. oper.push(AND); .)| 
						'|' (. oper.push(OR); .)) Expresion}.
	
	Expresion = Exp [(	tMay (. oper.push(GEQ); .)| 
						tMen (. oper.push(LEQ); .)| 
						tDif (. oper.push(DIF); .)| 
						'<' (. oper.push(LT); .)| 
						'>' (. oper.push(GT); .)| 
						tEqu (. oper.push(EQ); .)) Exp ].
	
	Factor =  ['~'|'-'] ( '(' ExpOY ')' | 
							idV (.
									string temp = conv(t->val);
									if(dir.find(temp) != dir.end()){
										operandos.push(CVariable(temp, dir.find(temp)->second.att_type, dir.find(temp)->second.att_mtd));
									} else if(dir[name].vars.find(temp) != dir[name].vars.end()){
										operandos.push(CVariable(temp, dir[name].vars.find(temp)->second.var_type, dir[name].vars.find(temp)->second.var_dim));
									} else {
										cout << "UNDECLARED VARIABLE: " << temp << '\n';
										err = true;
									}
								.)[Reg|Arr] | 
								CTE (.
									string temp = conv(t->val);
									operandos.push(CVariable(temp, ctype, 0));
								.)| Metodo | ExpOY).
	
	Init = idV (.string temp = conv(t->val); 
				if((dir.find(temp) == dir.end()) && (dir[name].vars.find(temp) == dir[name].vars.end())){
					cout << "UNDECLARED VARIABLE: " << temp << '\n';
					err = TRUE;
				}
				.)  
			'=' CTES ';'.
	
	Lec = tLec '(' idV ')' ';'.
	
	Lista = CTES [',' Lista].
	
	Main = tMai (.	name = conv(t->val);
					if(dir.find(name) == dir.end()){
						dir.insert(TABLA::value_type(name, Attribute(3, MAIN, 0, "")));
						vis = type = -1;
					} else {
						cout << "CANNOT DECLARE MORE THAN ONE MAIN." << '\n';
						err = TRUE;
					}
				.)'(' ')' '{' {Decl} {Estatuto} '}'.
	
	Metodo = idM '(' [Lista] ')'.
	
	MetodoR = Tipo idM (.	name = conv(t->val);
							if(dir.find(name) == dir.end()){
								dir.insert(TABLA::value_type(name, Attribute(vis, type, 1, clase)));
								vis = type = -1;
							} else {
								cout << "PREVIOUSLY DECLARED METHOD: " << name << '\n';
								err = TRUE;
							}
						.) '(' [Param] ')' '{' {Decl} {Estatuto} Return '}' (. name = "";.).
						
	MetodoV = tVoi idM (.	name = conv(t->val);
							if(dir.find(name) == dir.end()){
								dir.insert(TABLA::value_type(name, Attribute(vis, VOID, 1, clase)));
								vis = type = -1;
							} else {
								cout << "PREVIOUSLY DECLARED METHOD: " << name << '\n';
								err = TRUE;
							}
						.) '(' [Param] ')' '{' {Decl} {Estatuto} '}' (. name = "";.).
						
	New (. string nameL; .)  
		= idO idV (.	nameL = conv(t->val);
						if((dir.find(nameL) == dir.end()) && (dir[name].vars.find(nameL) == dir[name].vars.end())){
							dir[name].vars.insert(VMAP::value_type(nameL, Variable(4, 0)));
						} else {
							cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
							err = TRUE;
						}
					.)'=' tNew idC '(' [Lista] ')'.
					
	Param (. string nameL; .) 
		= Tipo idV (.	nameL = conv(t->val);
						if((dir.find(nameL) == dir.end()) && (dir[name].vars.find(nameL) == dir[name].vars.end())){
							dir[name].vars.insert(VMAP::value_type(nameL, Variable(type, 0)));
						} else {
							cout << "PREVIOUSLY DECLARED VARIABLE: " << nameL << '\n';
							err = TRUE;
						}
					.)[',' Param].
					
	Reg = '.' (Metodo | idV).
	
	Return = tRet ExpOY ';'.
	
	Termino = Factor {(	'*' (. oper.push(MUL); .)| 
						'/' (. oper.push(DIV); .)| 
						'%' (. oper.push(MOD); .)) Factor}.
	
	Tipo = tInt (. type = INT; .)| 
			tDou (. type = DOUBLE; .)| 
			tStr (. type = STRING; .)| 
			tBoo(. type = BOOLEAN; .).
	
	Vis = tPub (. vis = PUBLIC; .)| 
			tPri (. vis = PRIVATE; .)| 
			tPro(. vis = PROTECT; .).
END Solstice.	