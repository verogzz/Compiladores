#include "Tabla.h"
#include "Cubo.h"
#include "Memoria.h"
#include <iostream>
#include <sstream>
COMPILER Solstice
CTABLE dirProc; 	//Directorio de procedimientos
TABLE dirGral; 		//Directorio de clases
Cubo c;				//Cubo semantico
stack<int> oper;	//Pila de operadores
stack<CVariable> operandos;	//Pila de operandos
stack<int> saltos;	//Pila de saltos para el controles de flujo
stack<int> ifs;		//Pila para if's anidados
CTS cts;			//Directorio de constantes
vector<CVariable> t_params;	//Lista de parametros
vector<Cuadruplo> gen;	//Lista de cuadruplos
int type;	//Tipo de atributo/metodo
int ctype;	//Tipo de constante
int vis;	//Visibilidad
int dim;	//Dimension
int gi;		//Contador de global int
int gd;		//Contador de global double
int gb;		//Contador de global boolean
int gs;		//Contador de global string
int li;		//Contador de local int
int ld;		//Contador de local double
int lb;		//Contador de local boolean
int ls;		//Contador de local string
int ti;		//Contador de temporal int
int td;		//Contador de temporal double
int tb;		//Contador de temporal boolean
int ts;		//Contador de temporal string
int tp;		//Contador de temporal pointer
int mo;		//Contador de memoria de objetos
int ci;		//Contador de constante int
int cd;		//Contador de constante double
int cb;		//Contador de constante boolean
int cs;		//Contador de constante string
int classCount;	//Contador de clases
string name;	//Variable para nombres de metodos
string className;	//Variable nombres de clases
string objType;		//Variable para identificar tipo de objeto

/* Funcion que convierte un wchar_t a un
 * string.
 * Param: wchar_t
 * Return: string
 */
string conv(wchar_t* x){
	std::wstring ws(x);
	string s(ws.begin(), ws.end());
	s.assign(ws.begin(), ws.end());
	return s;
};

CHARACTERS
  letra = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  letraU = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
  digito = "0123456789".
  rc  = '\r'.
  sl  = '\n'.
  tab = '\t'.
  otrosC = ANY - '/' - '*'.
  otrosS = ANY - '"' - rc - sl - tab.
	
TOKENS
  idV = '_'letra {letra | digito}. /* Id Variable */
  idM = '#' letra {letra | digito}. /* Id Metodo */
  idO = letraU {letra | digito}. /* Id Objeto Nombre de la Clase */
  idC = '$' letraU {letra | digito}. /* Id Constructor */
  cteI = digito {digito}.
  cteD = digito {digito} "." digito {digito} .
  cteS = '\"' otrosS {otrosS} '\"'.
  cteB = "true" | "false".
  tCla = "class".
  tPub = "public".
  tPri = "private".	
  tPro = "protect".	
  tRet = "return".		
  tStr = "string".		
  tInt = "int". 		
  tDou = "double".
  tBoo = "bool".		
  tNew = "new".		
  tVoi = "void".		
  tCon = "if" | "?".		
  tEls = "else" | ":".
  tEif = "elseif" | ":?".  
  tWhi = "while" | "@".
  tExt = '-''>'.
  tMai = "main".
  tLec = '>''>'.
  tEsc = '<''<'.
  tInc = '+''+'.
  tDec = '-''-'.
  tMay = '>''='.
  tMen = '<''='.
  tDif = '<''>'.
  tEqu = '=''='.

PRAGMAS
	comentarios = "/*" {'/' | otrosC | '*' {'*'} otrosC} '*' {'*'} '/'.
	
IGNORE rc + sl + tab

PRODUCTIONS
	Solstice = (. 	c = Cubo(); 
					classCount = 0;
					type = ctype = vis = dim = -1;
					name = "";
					gi = gd = gb = gs = li = ld = lb = ls = ti = td = tb = ts = ci = cd = cb = cs = tp = mo = 0;
					className = "";
					cts.insert(CTS::value_type("1", Constantes(INT, bci + ci)));
					ci++;
					gen.push_back(Cuadruplo(MAI, gen.size(), -1 , -1));.)
					Class Main.
	
	Arr = 	'[' 
			cteI 	(.dim = atoi(&conv(t->val)[0]);
					if(dim < 2){
						cout << "Array size must be greater than one.\n";
						exit(0);
					}.)
			']' .
	
	Arr2 = 	'['	(.CVariable o = operandos.top();
				operandos.pop();
				CVariable q;
				if(o.var_dim < 1){
				cout << "Variable is not an array.\n";	
				exit(0);
				}
				oper.push(99);.)
			ExpOY 	(.if(oper.top() == 99){
						oper.pop();
					}
					if(!operandos.empty()){
						q = operandos.top();
						operandos.pop();
						if(q.var_type == INT){
							gen.push_back(Cuadruplo(VER, q.dir, -1, o.var_dim));
							int mem = btp + tp;
							if(mem > ltp){
								cout << "Memory out of bounds.\n";
								exit(0);
							}
							tp++;
							gen.push_back(Cuadruplo(ACC, q.dir, o.dir, mem));
							operandos.push(CVariable(o.name, o.var_type, 0, mem));
						}else{
							cout << "Expression must be int type.\n";	
							exit(0);
						}
					}else{
						cout << "Unexpected error.\n";	
						exit(0);
					}.)
			']' .
	
	Asig = ((tInc 	(.if(operandos.top().var_type == INT && operandos.top().var_dim < 2){
						gen.push_back(Cuadruplo(SUM, operandos.top().dir, cts["1"].dir , operandos.top().dir));
						operandos.pop();
					} else {
						cout << "Type mismatch :" << operandos.top().name << '\n';
						operandos.pop();
						exit(0);
					}.)| 
			tDec 	(.if(operandos.top().var_type == INT && operandos.top().var_dim < 2){
						gen.push_back(Cuadruplo(SUB, operandos.top().dir, cts["1"].dir , operandos.top().dir));
						operandos.pop();
					} else {
						cout << "Type mismatch :" << operandos.top().name << '\n';
						operandos.pop();
						exit(0);
					}.)| 
			Asig2) | Arr2
			Asig2).
	
	Asig2 = '=' ExpOY (.CVariable q = operandos.top();
						operandos.pop();
						CVariable p = operandos.top();
						operandos.pop();
						if(c.cubo[q.var_type][p.var_type][ASI] != -1 && 
							p.var_dim == q.var_dim){
							if(q.var_dim != 0){
								for(int i = 0; i < p.var_dim; i++){
									gen.push_back(Cuadruplo(ASI, q.dir + i, -1 , p.dir + i));
								}
							}else{
								gen.push_back(Cuadruplo(ASI, q.dir, -1 , p.dir));
							}
						} else {
							cout << "Type mismatch :" << p.name << '\t' << q.name << '\n';
							exit(0);
						}.).
	
	Atributo 	(.	name = ""; vis = type = -1;.)
				= 
				Vis Tipo idV (.	name = conv(t->val);
								if(dirProc.find(name) == dirProc.end()){
									int mem = 0;
									switch (type){
									case INT:	mem = gi;
												gi++;
												break;
									case DOUBLE:	mem = gd;
												gd++;
												break;
									case STRING:	mem = gs;
												gs++;
												break;
									case BOOLEAN:	mem = gb;
												gb++;
												break;
									}
									dirProc.insert(CTABLE::value_type(name, Attribute(vis, type, 0, mem)));
								} else {
									cout << "Previously declared attribute: " << name << '\n';
									exit(0);
								}
							.)
				';'.
	
	Bloque = Atributo{Atributo} Constructor {Vis (MetodoR | MetodoV)}.
	
	Ciclo = tWhi (.saltos.push(gen.size());.) 
			'(' ExpOY 
			')' (.CVariable boolRes = operandos.top();
				operandos.pop();
				if(boolRes.var_type != BOOLEAN){
					cout << "Expression must be boolean type.\n";
					exit(0);
				}else{
					gen.push_back(Cuadruplo(GTF, boolRes.dir, -1 , -1));
					saltos.push(gen.size() - 1);
				}.)	
			'{' {Estatuto} 
			'}' (.int falso = saltos.top();
				saltos.pop();
				int ret = saltos.top();
				saltos.pop();
				gen.push_back(Cuadruplo(GTO, ret, -1 , -1));
				gen[falso].res = gen.size();
				.).
				
	Class 	(.string ext = ""; className = ""; dirProc.clear();.)
			= 
			tCla idO (. className = conv(t->val); .) 
			[tExt idO (. ext = conv(t->val);
						if(dirGral.find(ext) != dirGral.end()){
							for(CTABLE::iterator i = dirGral[ext].attributes.begin() ; 
								i != dirGral[ext].attributes.end(); 
								i++){
									if(i->second.att_vis != PRIVATE){
										dirProc.insert(CTABLE::value_type(i->first, i->second));
									}
							}
						}else{
							cout << "Parent class not declared.\n";
							exit(0);
						}.)] 
			'{' Bloque 
			'}' (.if(dirGral.find(className) == dirGral.end()){
					int tam = -1;
					for(CTABLE::iterator i = dirGral[ext].attributes.begin() ; 
							i != dirGral[ext].attributes.end(); 
							i++){
								if(i->second.att_vis != PRIVATE){
									tam++;
								}
						}
					dirGral.insert(TABLE::value_type(className, ClassStruct(ext, dirProc, tam, classCount)));
					classCount++;
				}else{
					cout << "Class previously declared.\n";
					exit(0);
				}.)
			[Class].
	
	Con = 	tCon (.ifs.push(1);.)
			'(' ExpOY 
			')' (.CVariable boolRes = operandos.top();
				operandos.pop();
				if(boolRes.var_type != BOOLEAN){
					cout << "Expression must be boolean type.\n";
					exit(0);
				}else{
					gen.push_back(Cuadruplo(GTF, boolRes.dir, -1 , -1));
					saltos.push(gen.size() - 1);
				}.)
			'{' Estatuto {Estatuto} '}' 
			{ tEif (.int ps = saltos.top();
					saltos.pop();
					gen.push_back(Cuadruplo(GTO, -1, -1, -1));
					saltos.push(gen.size() - 1);
					gen[ps].res = gen.size();.)
			'(' ExpOY 
			')' (.ifs.top()++;
				CVariable boolRes = operandos.top();
				operandos.pop();
				if(boolRes.var_type != BOOLEAN){
					cout << "Expression must be boolean type.\n";
					exit(0);
				}else{
					gen.push_back(Cuadruplo(GTF, boolRes.dir, -1, -1));
					saltos.push(gen.size() - 1);
				}.)
			'{' Estatuto {Estatuto} '}'}.
	
	Con2 = 	tEls(.if(gen[saltos.top()].operador != GTO){
				int ps = saltos.top();
				saltos.pop();
				gen.push_back(Cuadruplo(GTO, -1, -1, -1));
				gen[ps].res = gen.size();
				saltos.push(gen.size() - 1);
				}.)
			'{' Estatuto {Estatuto} '}'.
	
	ConG = 	Con 
			[Con2](.int gts = ifs.top();
					ifs.pop();
					while(gts > 0){
					int ps = saltos.top();
					saltos.pop();
					if(gen[ps].operador == GTO)
						gen[ps].op1 = gen.size();
					else if (gen[ps].operador == GTF)
						gen[ps].res = gen.size();
					gts--;
					}.).
	
	Constructor (.name = ""; type = -1; li = ld = lb = ls = ti = td = tb = ts = 0;.)
				= 	
				idC (.name = conv(t->val);
					if(className.compare(name.substr(1)) != 0){
						cout << "Invalid Constructor Name\n" ;
						exit(0);
					}
					if(dirProc.find(name) == dirProc.end()){
						dirProc.insert(CTABLE::value_type(name, Attribute(PUBLIC, OBJECT, 1, gen.size(), 10000)));
					} else {
						cout << "Cannot declare more than one constructor.\n";
						exit(0);
					}.)
				'('  ')' '{' '}'
				(.gen.push_back(Cuadruplo(RET, -1, -1, -1));.).
	
	CTE (.ctype = -1;.)
		= 	(cteS (. ctype = 2; .)| 
			cteI (. ctype = 0; .)| 
			cteD (. ctype = 1; .)| 
			cteB (. ctype = 3; .))
			(.string c = conv(t->val);
				if(cts.find(c) == cts.end()){
					int mem = 0;
					switch (ctype){
					case INT:	mem = bci + ci;
								if(mem > lci){
									cout << "Memory out of bounds.\n";
									exit(0);
								}
								ci++;
								break;
					case DOUBLE:	mem = bcd + cd;
								if(mem > lcd){
									cout << "Memory out of bounds.\n";
									exit(0);
								}
								cd++;
								break;
					case STRING:	mem = bcs + cs;
								if(mem > lcs){
									cout << "Memory out of bounds.\n";
									exit(0);
								}
								cs++;
								break;
					case BOOLEAN:	mem = bcb + cb;
								if(mem > lcb){
									cout << "Memory out of bounds.\n";
									exit(0);
								}
								cb++;
								break;
					}
					cts.insert(CTS::value_type(c, Constantes(ctype, mem)));
				}.).
	
	CTES (. string temp = ""; .)
		= 	idV (.temp = conv(t->val);
				if(dirProc[name].vars.find(temp) != dirProc[name].vars.end()){
					operandos.push(CVariable(temp, 
									dirProc[name].vars[temp].var_type, 
									dirProc[name].vars[temp].var_dim, 
									dirProc[name].vars[temp].dir));
				} else if(dirProc.find(temp) != dirProc.end()){
					operandos.push(CVariable(temp, 
									dirProc[name].att_type, 
									0,
									dirProc[name].dir));
				} else {
					cout << "Undeclared variable.\n";
					exit(0);
				}.)| 
			CTE(.temp = conv(t->val);
				operandos.push(CVariable(temp, ctype, 0, cts[temp].dir));.).
	
	Decl (. string nameL = ""; dim = 0;.) 
			= (New | Tipo idV (.nameL = conv(t->val); int mem = 0;.)
			( '=' CTES | Arr) (.if(dirProc[name].vars.find(nameL) == dirProc[name].vars.end()){
									switch (type){
									case INT:	mem = bli + li;
												if(mem > lli){
													cout << "Memory out of bounds.\n";
													exit(0);
												}
												if(dim == 0){
													li++;
												}else{
													li += dim;
												}
												break;
									case DOUBLE:	mem = bld + ld;
												if(mem > lld){
													cout << "Memory out of bounds.\n";
													exit(0);
												}
												if(dim == 0){
													ld++;
												}else{
													ld += dim;
												}
												break;
									case STRING:	mem = bls + ls;
												if(mem > lls){
													cout << "Memory out of bounds.\n";
													exit(0);
												}
												if(dim == 0){
													ls++;
												}else{
													ls += dim;
												}
												break;
									case BOOLEAN:	mem = blb + lb;
												if(mem > llb){
													cout << "Memory out of bounds.\n";
													exit(0);
												}
												if(dim == 0){
													lb++;
												}else{
													lb += dim;
												}
												break;
									}
									dirProc[name].vars.insert(VMAP::value_type(nameL, Variable(type, dim, mem)));
								} else {
									cout << "Previously declared variable. " << nameL << '\n';
									exit(0);
								}
								if(dim == 0){
									if(c.cubo[operandos.top().var_type][type][ASI] != -1){
										gen.push_back(Cuadruplo(ASI, operandos.top().dir, -1, mem));
										operandos.pop();
									} else {
										cout << "Type mismatch :" << nameL << '\t' << operandos.top().name << '\n';
										operandos.pop();
										exit(0);
									}
								}.) 
			{',' idV (. nameL = conv(t->val); dim = 0; mem = 0;.) 
			( '=' CTES | Arr )(.if(dirProc[name].vars.find(nameL) == dirProc[name].vars.end()){
								switch (type){
								case INT:	mem = bli + li;
											if(mem > lli){
												cout << "Memory out of bounds.\n";
												exit(0);
											}
											if(dim == 0){
												li++;
											}else{
												li += dim;
											}
											break;
								case DOUBLE:	mem = bld + ld;
											if(mem > lld){
												cout << "Memory out of bounds.\n";
												exit(0);
											}
											if(dim == 0){
												ld++;
											}else{
												ld += dim;
											}
											break;
								case STRING:	mem = bls + ls;
											if(mem > lls){
												cout << "Memory out of bounds.\n";
												exit(0);
											}
											if(dim == 0){
												ls++;
											}else{
												ls += dim;
											}
											break;
								case BOOLEAN:	mem = blb + lb;
											if(mem > llb){
												cout << "Memory out of bounds.\n";
												exit(0);
											}
											if(dim == 0){
												lb++;
											}else{
												lb += dim;
											}
											break;
								}
								dirProc[name].vars.insert(VMAP::value_type(nameL, Variable(type, dim, mem)));
							} else {
								cout << "Previously declared variable. " << nameL << '\n';
								exit(0);
							}
							if(dim == 0){
								if(c.cubo[operandos.top().var_type][type][ASI] != -1){
									gen.push_back(Cuadruplo(ASI, operandos.top().dir, -1, mem));
									operandos.pop();
								} else {
									cout << "Type mismatch :" << nameL << '\t' << operandos.top().name << '\n';
									operandos.pop();
									exit(0);
								}
							}.)}) ';'.
	
	Esc = 	tEsc '(' ExpOY 
			{(.if(!oper.empty() && oper.top() == APP){
				CVariable o2 = operandos.top();
				operandos.pop();
				CVariable o1 = operandos.top();
				operandos.pop();
				int op = oper.top();
				oper.pop();
				if(c.cubo[o1.var_type][o2.var_type][op] != -1 && o1.var_dim == o2.var_dim){
					int mem = bts + ts;
					if(mem > lts){
						cout << "Memory out of bounds.\n";
						exit(0);
					}
					ts++;
					gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
					operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
					 ;
				} else {
					cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
					exit(0);
				}
			}.)
			'^'(.oper.push(APP);.) 
			ExpOY}	(.if(!oper.empty() && oper.top() == APP){
						CVariable o2 = operandos.top();
						operandos.pop();
						CVariable o1 = operandos.top();
						operandos.pop();
						int op = oper.top();
						oper.pop();
						if(c.cubo[o1.var_type][o2.var_type][op] != -1 && o1.var_dim == o2.var_dim){
							int mem = bts + ts;
							if(mem > lts){
								cout << "Memory out of bounds.\n";
								exit(0);
							}
							ts++;
							gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
							operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
							 ;
						} else {
							cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
							exit(0);
						}
					}.) 
			')' (.CVariable strRes = operandos.top();
				operandos.pop();
				gen.push_back(Cuadruplo(WRI, strRes.dir, -1, -1));.).
	
	Estatuto 	(.string temp = "";.)
				= (idV (.temp = conv(t->val); 
						if (dirProc[name].vars.find(temp) != dirProc[name].vars.end()){
							operandos.push(CVariable(temp, 
										dirProc[name].vars[temp].var_type,
										dirProc[name].vars[temp].var_dim,
										dirProc[name].vars[temp].dir));
						}else if(dirProc.find(temp) != dirProc.end()){
							operandos.push(CVariable(temp, 
										dirProc[temp].att_type,
										0,
										dirProc[temp].dir));
						}else {
							cout << "Undeclared Variable: " << temp << '\n';
							exit(0);
						}.) 
				(Asig | Llamada) | Metodo | Esc | Lec ) ';' | Ciclo | ConG.
	
	Exp 	= Termino 
			{(.if(!oper.empty() && (oper.top() == SUM || 
				oper.top() == SUB)){
				CVariable o2 = operandos.top();
				operandos.pop();
				CVariable o1 = operandos.top();
				operandos.pop();
				int op = oper.top();
				oper.pop();
				if(c.cubo[o1.var_type][o2.var_type][op] != -1 && 
					o1.var_dim < 2 &&
					o1.var_dim == o2.var_dim){
					int mem = 0;
					switch (c.cubo[o1.var_type][o2.var_type][op]){
					case INT:	mem = bti + ti;
						if(mem > lti){
							cout << "Memory out of bounds.\n";
							exit(0);
						}
						ti++;
						break;
					case DOUBLE:	mem = btd + td;
						if(mem > ltd){
							cout << "Memory out of bounds.\n";
							exit(0);
						}
						td++;
						break;
					}
					gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
					operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
				} else {
					cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
					exit(0);
				}
			}.)
			('+' (. oper.push(SUM); .) | 
			'-' (. oper.push(SUB); .)) Termino}
			(.if(!oper.empty() && (oper.top() == SUM || 
				oper.top() == SUB)){
				CVariable o2 = operandos.top();
				operandos.pop();
				CVariable o1 = operandos.top();
				operandos.pop();
				int op = oper.top();
				oper.pop();
				if(c.cubo[o1.var_type][o2.var_type][op] != -1 && 
					o1.var_dim < 2 &&
					o1.var_dim == o2.var_dim){
					int mem = 0;
					switch (c.cubo[o1.var_type][o2.var_type][op]){
					case INT:	mem = bti + ti;
								if(mem > lti){
									cout << "Memory out of bounds.\n";
									exit(0);
								}
								ti++;
								break;
					case DOUBLE:	mem = btd + td;
								if(mem > ltd){
									cout << "Memory out of bounds.\n";
									exit(0);
								}
								td++;
								break;
					}
					gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
					operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
					 ;
				} else {
					cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
					exit(0);
				}
				}.).
	
	ExpOY 	= (.int mem = 0;.)
				Expresion 
			{(.if(!oper.empty() && (oper.top() == AND || 
				oper.top() == OR)){
				CVariable o2 = operandos.top();
				operandos.pop();
				CVariable o1 = operandos.top();
				operandos.pop();
				int op = oper.top();
				oper.pop();
				if(c.cubo[o1.var_type][o2.var_type][op] != -1&& 
					o1.var_dim < 2 &&
					o1.var_dim == o2.var_dim){
					mem = btb + tb;
					if(mem > ltb){
						cout << "Memory out of bounds.\n";
						exit(0);
					}
					tb++;
					gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
					operandos.push(CVariable("memoria",c.cubo[o1.var_type][o2.var_type][op], 0, mem));
					 ;
				} else {
					cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
					exit(0);
				}
			}.)
			('&' (. oper.push(AND); .)| 
			'|' (. oper.push(OR); .)) Expresion}
			(.if(!oper.empty() && (oper.top() == AND || 
				oper.top() == OR)){
				CVariable o2 = operandos.top();
				operandos.pop();
				CVariable o1 = operandos.top();
				operandos.pop();
				int op = oper.top();
				oper.pop();
				if(c.cubo[o1.var_type][o2.var_type][op] != -1 && 
					o1.var_dim < 2 &&
					o1.var_dim == o2.var_dim){
					mem = btb + tb;
					if(mem > ltb){
						cout << "Memory out of bounds.\n";
						exit(0);
					}
					tb++;
					gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
					operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
					 ;
				} else {
					cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
					exit(0);
				}
			}.).
	
	Expresion 	= (.int mem = 0;.)
				Exp 
				[(.if(!oper.empty() && (oper.top() == GEQ || 
					oper.top() == LEQ || oper.top() == DIF ||
					oper.top() == LT || oper.top() == GT ||
					oper.top() == EQ)){
					CVariable o2 = operandos.top();
					operandos.pop();
					CVariable o1 = operandos.top();
					operandos.pop();
					int op = oper.top();
					oper.pop();
					if(c.cubo[o1.var_type][o2.var_type][op] != -1 && 
					o1.var_dim < 2 &&
					o1.var_dim == o2.var_dim){
						mem = btb + tb;
						if(mem > ltb){
							cout << "Memory out of bounds.\n";
							exit(0);
						}
						tb++;
						gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
						operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
						 ;
					} else {
						cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
						exit(0);
					}
				}.)
				(tMay (. oper.push(GEQ); .)| 
				tMen (. oper.push(LEQ); .)| 
				tDif (. oper.push(DIF); .)| 
				'<' (. oper.push(LT); .)| 
				'>' (. oper.push(GT); .)| 
				tEqu (. oper.push(EQ); .)) Exp ]
				(.if(!oper.empty() && (oper.top() == GEQ || 
					oper.top() == LEQ || oper.top() == DIF ||
					oper.top() == LT || oper.top() == GT ||
					oper.top() == EQ)){
					CVariable o2 = operandos.top();
					operandos.pop();
					CVariable o1 = operandos.top();
					operandos.pop();
					int op = oper.top();
					oper.pop();
					if(c.cubo[o1.var_type][o2.var_type][op] != -1 && 
					o1.var_dim < 2 &&
					o1.var_dim == o2.var_dim){
						mem = btb + tb;
						if(mem > ltb){
							cout << "Memory out of bounds.\n";
							exit(0);
						}
						tb++;
						gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
						operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
						 ;
					} else {
						cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
						exit(0);
					}
				}.).
	
	Factor 	=	['~' (.oper.push(NOT);.)|
				'-' (.oper.push(NOT);.)] ( 
				'(' (.oper.push(99);.) ExpOY 
				')' (.oper.pop();.)| 
				idV (.string temp = conv(t->val);
					if(dirProc[name].vars.find(temp) != dirProc[name].vars.end()){
						operandos.push(CVariable(temp, 
										dirProc[name].vars[temp].var_type, 
										dirProc[name].vars[temp].var_dim, 
										dirProc[name].vars[temp].dir));
					} else if(dirProc.find(temp) != dirProc.end()){
						operandos.push(CVariable(temp, 
										dirProc[temp].att_type, 
										dirProc[temp].att_mtd, 
										dirProc[temp].dir));
					} else {
						cout << "Undeclared Variable: " << temp << '\n';
						exit(0);
					}.)
				[Llamada|Arr2] | 
				CTE (.string temp = conv(t->val);
					operandos.push(CVariable(temp, ctype, 0, cts[temp].dir));
				.) | Metodo)(.int mem = 0;
							CVariable o;
							if(!oper.empty() && (oper.top() == NOT)){
								o = operandos.top();
								operandos.pop();
								oper.pop();
								switch (o.var_type){
								case INT:	mem = bti + ti;
											if(mem > lti){
												cout << "Memory out of bounds.\n";
												exit(0);
											}
											ti++;
											break;
								case DOUBLE:	mem = btd + td;
											if(mem > ltd){
												cout << "Memory out of bounds.\n";
												exit(0);
											}
											td++;
											break;
								case BOOLEAN:	mem = btb + tb;
											if(mem > ltb){
												cout << "Memory out of bounds.\n";
												exit(0);
											}
											tb++;
											break;
								}
								gen.push_back(Cuadruplo(NOT, 
												o.dir, 
												-1, 
												mem));
								operandos.push(CVariable("memoria", o.var_type, 0, mem));
							}.).
	
	Lec = tLec '(' idV (.CVariable o1; string temp = conv(t->val); 
						if (dirProc[name].vars.find(temp) != dirProc[name].vars.end()){
							o1.name = temp;
							o1.var_dim = 0;
							o1.var_type = dirProc[name].vars.find(temp)->second.var_type;
							o1.dir = dirProc[name].vars.find(temp)->second.dir;
						}else if(dirProc.find(temp) != dirProc.end()){
							o1.name = temp;
							o1.var_dim = 0;
							o1.var_type = dirProc.find(temp)->second.att_type;
							o1.dir = o1.dir = dirProc.find(temp)->second.dir;
						}else {
							cout << "Undeclared Variable: " << temp << '\n';
							exit(0);
						}.)
			',' Tipo 	(.if(o1.var_type == type){
							gen.push_back(Cuadruplo(REA, o1.dir, type, -1));
						} else {
							cout << "Type mismatch :" << o1.name << '\n';
							exit(0);
						}.)
			')'.
	
	Lista = CTES (.t_params.push_back(operandos.top()); operandos.pop();.)
			[',' Lista].
	
	Main = tMai (.name = conv(t->val);
				if(dirProc.find(name) == dirProc.end()){
					dirProc.insert(CTABLE::value_type(name, Attribute(3, MAIN, 0)));
					type = -1;
				} else {
					cout << "Cannot declare more the one main.\n";
					exit(0);
				}.)
				'(' ')' 
				'{' (.gen[0].op1 = gen.size();
					li = ld = lb = ls = ti = td = tb = ts = 0;.)
				{Decl} {Estatuto} '}'
				(.if(dirGral.find("main") == dirGral.end()){
					dirGral.insert(TABLE::value_type("main", ClassStruct("", dirProc)));
				}
				gen.push_back(Cuadruplo(END, -1, -1, -1));.).
	
	Metodo = 	idM (.string name = conv(t->val);
					CTABLE ttemp;
					if(dirProc.find(name) != dirProc.end()){
						ttemp = dirProc;
						gen.push_back(Cuadruplo(ERA, ttemp[name].dir, -1, -1));
					}else if(dirGral[objType].attributes.find(name) != dirGral[objType].attributes.end()){
						ttemp = dirGral[objType].attributes;
						gen.push_back(Cuadruplo(ERA, ttemp[name].dir, -1, -1));
					}else{
						cout << "Undeclared method: " << name << '\n';
						exit(0);
					}.)
				'(' [Lista] (.if(t_params.size() == ttemp[name].params.size()){
								for(int i = 0; i < ttemp[name].params.size(); i++){
									if (t_params.at(i).var_type != ttemp[name].params.at(i).var_type){
										cout << "Parameter type mismatch.\n";
										exit(0);
										i = ttemp[name].params.size();
									}
									gen.push_back(Cuadruplo(PAR, t_params.at(i).dir, -1 , ttemp[name].params.at(i).dir));
								}
							}else{
								cout << "There is no method with that amount of parameter.\n";
								exit(0);
							}
							t_params.clear();.)
				')'
				(.gen.push_back(Cuadruplo(GSU, ttemp[name].dir, -1, -1));
				operandos.push(CVariable(name, ttemp[name].att_type, 0, ttemp[name].dirMem));.).
	
	MetodoR 	(.type = -1; li = ld = lb = ls = ti = td = tb = ts = 0;.)
			= 	Tipo idM (.	name = conv(t->val);
							int mem = 0;
							switch (type){
							case INT:	mem = bgi + gi;
										if(mem > lgi){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										gi++;
										break;
							case DOUBLE:	mem = bgd + gd;
										if(mem > lgd){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										gd++;
										break;
							case STRING:	mem = bgs + gs;
										if(mem > lgs){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										gs++;
										break;
							case BOOLEAN:	mem = bgb + gb;
										if(mem > lgb){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										gb++;
										break;
							}
							if(dirProc.find(name) == dirProc.end()){
								dirProc.insert(CTABLE::value_type(name, Attribute(vis, type, 1, gen.size(), mem)));
							} else {
								cout << "Previously declared method: " << name << '\n';
								exit(0);
							}
						.) 
				'(' [Param] ')' '{' {Decl} 
				{Estatuto} Return 
				'}' (. 	name = "";
						gen.push_back(Cuadruplo(RET, -1, -1, -1));.).
						
	MetodoV 	(.type = -1; li = ld = lb = ls = ti = td = tb = ts = 0;.)
			= 	tVoi idM (.	name = conv(t->val);
							if(dirProc.find(name) == dirProc.end()){
								dirProc.insert(CTABLE::value_type(name, Attribute(vis, VOID, 1, gen.size())));
							} else {
								cout << "Previously declared method: " << name << '\n';
								exit(0);
							}
						.) 
				'(' [Param] ')' '{' {Decl} 
				{Estatuto} '}' (. name = "";
								gen.push_back(Cuadruplo(RET, -1, -1, -1));.).
						
	New (. string classN, idName, consN = ""; int mem = 0;.)  
		= idO (.classN = conv(t->val);.)
		idV (.idName = conv(t->val);
			if((dirGral.find(classN) != dirGral.end()) && (dirProc[name].vars.find(idName) == dirProc[name].vars.end())){
				mem = bmo + mo;
				mo = mo + dirGral[classN].tamanio;
				dirProc[name].vars.insert(VMAP::value_type(idName, Variable(OBJECT + dirGral[classN].serie, 0, mem)));
			} else {
				cout << "Previously declared variable. " << idName << '\n';
				exit(0);
			}.)
		'=' tNew 
		idC (.consN = conv(t->val);
			if(dirGral[classN].attributes.find(consN) == dirGral[classN].attributes.end()){
				cout << "Undeclared constructor: " << consN << '\n';
				exit(0);
			}
			gen.push_back(Cuadruplo(ERA, dirGral[classN].attributes[consN].dir, -1, -1));.)
		'(' 
		[Lista]	(.if(t_params.size() == dirGral[classN].attributes[consN].params.size()){
					for(int i = 0; i < dirGral[classN].attributes[consN].params.size(); i++){
						if (t_params.at(i).var_type != dirGral[classN].attributes[consN].params.at(i).var_type){
							cout << "Parameter type mismatch.\n";
							exit(0);
							i = dirGral[classN].attributes[consN].params.size();
						}
						gen.push_back(Cuadruplo(PAR, t_params.at(i).dir, -1 , dirGral[classN].attributes[consN].params.at(i).dir));
					}
				}else{
					cout << "There is no method with that amount of parameter.\n";
				}
				t_params.clear();.)
		')'(.gen.push_back(Cuadruplo(GSU, dirGral[classN].attributes[consN].dir, -1, -1));.).
					
	Param (. string nameL; .) 
		= Tipo idV (.	nameL = conv(t->val);
						if((dirProc.find(nameL) == dirProc.end()) && (dirProc[name].vars.find(nameL) == dirProc[name].vars.end())){
							int mem = 0;
							switch (type){
							case INT:	mem = bli + li;
										if(mem > lli){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										li++;
										break;
							case DOUBLE:	mem = bld + ld;
										if(mem > lld){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										ld++;
										break;
							case STRING:	mem = bls + ls;
										if(mem > lls){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										ls++;
										break;
							case BOOLEAN:	mem = blb + lb;
										if(mem > llb){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										lb++;
										break;
							}
							dirProc[name].vars.insert(VMAP::value_type(nameL, Variable(type, 0, mem)));
							dirProc[name].params.push_back(Variable(type, 0, mem));
						} else {
							cout << "Previously declared variable. " << nameL << '\n';
							exit(0);
						}
					.)[',' Param].
					
	Llamada = (.objType = "";
				CVariable o = operandos.top();
				operandos.pop();
				for(TABLE::iterator i = dirGral.begin(); i != dirGral.end(); i++){
					if(i->second.serie == (o.var_type - OBJECT)){
						objType = i->first;
						break;
					}
				}.) 
			'.' (Metodo | 
			idV (.string att = conv(t->val);
				if(dirGral[objType].attributes.find(att) != dirGral[objType].attributes.end()){
					operandos.push(CVariable(att, dirGral[objType].attributes[att].att_type, 0, dirGral[objType].attributes[att].dir));
				}else{
					cout << "Attribute not declared";
					exit(0);
				}.)).
	
	Return = 	tRet ExpOY (.if(operandos.size() != 0){
								if(dirProc[name].att_type == operandos.top().var_type && 
									operandos.top().var_dim < 2){
									gen.push_back(Cuadruplo(MR, operandos.top().dir, -1, dirProc[name].dirMem));
									operandos.pop();
								}else{
									cout << "Return value is not the expected type.\n";
									exit(0);
								}
							}else{
								exit(0);
							}.)
				';'.
	
	Termino = Factor {(.if(!oper.empty() && (oper.top() == MUL || 
							oper.top() == DIV || 
							oper.top() == MOD)){
								CVariable o2 = operandos.top();
								operandos.pop();
								CVariable o1 = operandos.top();
								operandos.pop();
								int op = oper.top();
								oper.pop();
								if(c.cubo[o1.var_type][o2.var_type][op] != -1 && 
									o1.var_dim < 2 &&
									o1.var_dim == o2.var_dim){
									int mem = 0;
									switch (c.cubo[o1.var_type][o2.var_type][op]){
									case INT:	mem = bti + ti;
										if(mem > lti){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										ti++;
										break;
									case DOUBLE:	mem = btd + td;
										if(mem > ltd){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										td++;
										break;
									}
									gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
									operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
									 ;
								} else {
									cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
									exit(0);
								}
							}
						.)
					(	'*' (. oper.push(MUL); .)| 
						'/' (. oper.push(DIV); .)| 
						'%' (. oper.push(MOD); .)) Factor} 
						(.if(!oper.empty() && (oper.top() == MUL || 
							oper.top() == DIV || 
							oper.top() == MOD)){
								CVariable o2 = operandos.top();
								operandos.pop();
								CVariable o1 = operandos.top();
								operandos.pop();
								int op = oper.top();
								oper.pop();
								if(c.cubo[o1.var_type][o2.var_type][op] != -1 && 
									o1.var_dim < 2 &&
									o1.var_dim == o2.var_dim){
									int mem = 0;
									switch (c.cubo[o1.var_type][o2.var_type][op]){
									case INT:	mem = bti + ti;
										if(mem > lti){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										ti++;
										break;
									case DOUBLE:	mem = btd + td;
										if(mem > ltd){
											cout << "Memory out of bounds.\n";
											exit(0);
										}
										td++;
										break;
									}
									gen.push_back(Cuadruplo(op, o1.dir, o2.dir, mem));
									operandos.push(CVariable("memoria" ,c.cubo[o1.var_type][o2.var_type][op], 0, mem));
									 ;
								} else {
									cout << "Type mismatch :" << o1.name << '\t' << o2.name << '\n';
									exit(0);
								}
							}.).
	
	Tipo = 	tInt (. type = INT; .)| 
			tDou (. type = DOUBLE; .)| 
			tStr (. type = STRING; .)| 
			tBoo (. type = BOOLEAN; .).
	
	Vis = 	tPub (. vis = PUBLIC; .)| 
			tPri (. vis = PRIVATE; .)| 
			tPro (. vis = PROTECT; .).
END Solstice.	